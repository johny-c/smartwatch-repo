Display Bluetooth {
    Driver 'Bluetooth'
    Device 'D0:C1:B1:1D:63:0F'
    Time   1000
    Size   '126x126'
    Font   '6x8'
    Pixel  '1+0'
    Gap    '0x0'
    Border 1
    Foreground 'FFFFFFFF'
    Background '00000000'
    Basecolor  '00000000'
}

Display Image {
    Driver 'Image'
    Format 'PPM'
    Size   '126x126'
    Font   '6x8'
    Pixel  '1+0'
    Gap    '0x0'
    Border 1
    Foreground 'FFFFFFFF'
    Background '00000000'
    Basecolor  '00000000'
}

Widget HOST {
    class  'Text'
    expression  uname('nodename')
    width  21
    align  'C'
    update 0
    Background '000000'
    Foreground 'ffffff'
}

Widget UPTIME {
    class 'Text'
    expression uptime('%H:%M:%S')
    prefix ' Uptime: '
    width 21
    align 'C'
    update 1000
    Background '000000'
    Foreground 'ffffff'
}

Widget LOAD {
    class 'Text'
    expression loadavg(1)
    prefix 'Load: '
    postfix loadavg(1) > 1.0 ? '!' : ' '
    width 10
    precision 2
    align 'R'
    update 2000
}

Widget TIME {
    class 'Text'
    expression strftime('%d.%m.%Y %H:%M:%S',time())
    width 21
    align 'C'
    update 1000
    Background '000000'
    Foreground 'ffffff'
}

Widget DFTITLE {
    class  'Text'
    expression 'Used space'
    width  10
    align  'L'
    update 0
    Background '000000'
    Foreground 'ffffff'

}

Widget DF1 {
    class  'Text'
    expression 100-statfs('/', 'bavail')*100/statfs('/', 'blocks')
    prefix 'root '
    postfix '%'
    width  10
    align  'L'
    precision 1
    update 4000
}

Widget DF2 {
    class  'Text'
    expression 100-statfs('/', 'bavail')*100/statfs('/', 'blocks')
    prefix 'usb1 '
    postfix '%'
    width  10
    align  'L'
    precision 1
    update 4000
}

Widget DF3 {
    class  'Text'
    expression 100-statfs('/', 'bavail')*100/statfs('/', 'blocks')
    prefix 'usb2 '
    postfix '%'
    width  10
    align  'L'
    precision 1
    update 4000
}

Widget CPU {
    class  'Text'
    expression  'CPU'
    width  10
    align  'L'
    update 0
    Background '000000'
    Foreground 'ffffff'
}

Widget CPU1 {
    class  'Text'
    expression  proc_stat::cpu('busy',   500)
    prefix 'Busy: '
    postfix '%'
    width  10
    align  'R'
    precision 0
    update 1000
}

Widget BusyBar {
    class 'Bar'
    expression  proc_stat::cpu('busy',   500)
    expression2 proc_stat::cpu('system', 500)
    length 10
    direction 'E'
    update 500
    BarColor0 '5f5fff'
    BarColor1 'ff5f5f'

}

Widget MEM {
    class  'Text'
    expression  'Memory     Swap'
    width  21
    align  'L'
    update 0
    Background '000000'
    Foreground 'ffffff'
}

Widget MEM1 {
    class  'Text'
    expression  mf=ceil(meminfo('MemFree')/1024);mt=ceil(meminfo('MemTotal')/1024);mu=mt-mf; mu.'/'.mt
    postfix 'M'
    width  10
    align  'L'
    update 4000
}

Widget MEM2 {
    class  'Text'
    expression  sf=ceil(meminfo('SwapFree')/1024);st=ceil(meminfo('SwapTotal')/1024);su=st-sf; su.'/'.st
    postfix 'M'    
    width 10
    align  'L'
    update 4000
}

i2c_sensors-path '/sys/class/hwmon/hwmon0/'
Widget TMP {
    class  'Text'
    expression  'CPU-Temp   MB-Temp'
    width  21
    align  'L'
    update 0
    Background '000000'
    Foreground 'ffffff'
}

Widget TMP1 {
    class      'Text'
    expression  i2c_sensors('temp1_input')
    postfix    '°C'
    width       10
    precision   1
    align      'L'
    update      5000
}

Widget TMP2 {
    class      'Text'
    expression  i2c_sensors('temp2_input')
    postfix    '°C'
    width       10
    precision   1
    align      'L'
    update      5000
}

Display 'Bluetooth'
 
Layout Dockstar{
    Row01.Col01  'HOST'
    Row02.Col01  'TIME'

    Row04.Col01  'CPU'
    Row05.Col01	 'CPU1'
    Row06.Col01  'LOAD'
    Row07.Col01  'BusyBar'

    Row04.Col12  'DFTITLE'
    Row05.Col12  'DF1'
    Row06.Col12  'DF2'
    Row07.Col12  'DF3'

    Row09.Col01  'MEM'
    Row10.Col01  'MEM1'
    Row10.Col12  'MEM2'

    Row12.Col01  'TMP'
    Row13.Col01  'TMP'

    Row15.Col01  'UPTIME'
}
 
Layout 'Dockstar'
